function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { memo, useMemo, useState, useRef, useImperativeHandle, useCallback, forwardRef, useEffect } from 'react';
import { Platform, View, Modal, TouchableOpacity, Animated, PanResponder, useColorScheme } from 'react-native';
import { styles } from './styles';
export const BottomSheet = /*#__PURE__*/memo( /*#__PURE__*/forwardRef((props, ref) => {
  const {
    height,
    colorScheme,
    onRequestClose,
    backdropClosesSheet = true,
    backdropBackgroundColor,
    sheetBackgroundColor,
    sheetStyle,
    draggable = true,
    showDragIcon = true,
    dragIconColor,
    dragIconStyle,
    borderRadius = 10,
    contentContainerStyle,
    onOpenStart,
    onOpenFinish,
    onCloseStart,
    onCloseFinish,
    openTime = 300,
    closeTime = 300,
    children
  } = props;
  const isDraggable = Platform.OS !== 'web' && !!draggable;
  const colorSchemeName = useColorScheme() || 'light';
  const isDarkMode = useMemo(() => {
    // Color Scheme from props passed as 'auto' or undefined
    if (colorScheme === 'auto' || !colorScheme) {
      // Then use OS hook result
      return colorSchemeName === 'dark';
    } // Otherwise return user choice


    return colorScheme === 'dark';
  }, [colorScheme, colorSchemeName]);
  const [visible, setVisible] = useState(false);
  const animatedHeight = useMemo(() => new Animated.Value(0), []);
  const pan = useMemo(() => new Animated.ValueXY(), []);
  const setModalVisibility = useCallback(newVisible => {
    // Open modal
    if (newVisible) {
      setVisible(true);
      if (typeof onOpenStart === 'function') onOpenStart();
      Animated.timing(animatedHeight, {
        toValue: height,
        duration: openTime,
        useNativeDriver: false
      }).start(() => {
        if (typeof onOpenFinish === 'function') onOpenFinish();
      });
      return;
    } // Close modal


    if (typeof onCloseStart === 'function') onCloseStart();
    Animated.timing(animatedHeight, {
      toValue: 0,
      duration: closeTime,
      useNativeDriver: false
    }).start(() => {
      pan.setValue({
        x: 0,
        y: 0
      });
      setVisible(false);
      if (typeof onCloseFinish === 'function') onCloseFinish();
    });
  }, [animatedHeight, closeTime, height, onCloseFinish, onCloseStart, onOpenFinish, onOpenStart, openTime, pan]); // Respond to pan changes

  const panResponder = useRef(PanResponder.create({
    onStartShouldSetPanResponder: () => true,
    onPanResponderMove: (e, gestureState) => {
      if (gestureState.dy > 0) {
        Animated.event([null, {
          dy: pan.y
        }], {
          useNativeDriver: false
        })(e, gestureState);
      }
    },
    onPanResponderRelease: (_e, gestureState) => {
      const gestureLimitArea = height / 3;
      const gestureDistance = gestureState.dy;

      if (gestureDistance > gestureLimitArea) {
        setModalVisibility(false);
      } else {
        Animated.spring(pan, {
          toValue: {
            x: 0,
            y: 0
          },
          useNativeDriver: false
        }).start();
      }
    }
  })).current; // If `height` prop changes while open, respond and change to new height immediately

  useEffect(() => {
    if (visible) {
      Animated.timing(animatedHeight, {
        toValue: height,
        duration: 0,
        useNativeDriver: false
      }).start();
    } // eslint-disable-next-line react-hooks/exhaustive-deps

  }, [height]); // we only want the useEffect to run when height prop changes
  // Expose specific methods on hook

  useImperativeHandle(ref, () => ({
    show: () => setModalVisibility(true),
    hide: () => setModalVisibility(false)
  })); // Return nothing if not visible

  if (!visible) return null;
  return /*#__PURE__*/React.createElement(Modal, {
    transparent: true,
    visible: visible,
    onRequestClose: onRequestClose ? onRequestClose : () => setModalVisibility(false)
  }, /*#__PURE__*/React.createElement(View, {
    style: [styles.wrapper, {
      backgroundColor: backdropBackgroundColor || `#25252599`,
      minHeight: height
    }]
  }, /*#__PURE__*/React.createElement(TouchableOpacity, {
    testID: "backdrop",
    disabled: !backdropClosesSheet,
    style: styles.backdrop,
    activeOpacity: 1,
    onPress: () => setModalVisibility(false)
  }), /*#__PURE__*/React.createElement(Animated.View, _extends({}, isDraggable && panResponder.panHandlers, {
    style: [{
      transform: pan.getTranslateTransform()
    }, styles.container, {
      height: animatedHeight,
      borderTopRightRadius: borderRadius,
      borderTopLeftRadius: borderRadius,
      backgroundColor: sheetBackgroundColor || isDarkMode ? '#222222' : '#F3F3F3'
    }, sheetStyle],
    testID: "animated-view"
  }), isDraggable && showDragIcon && /*#__PURE__*/React.createElement(View, {
    style: styles.draggableContainer
  }, /*#__PURE__*/React.createElement(View, {
    testID: "drag-icon",
    style: [styles.draggableIcon, dragIconStyle, {
      backgroundColor: dragIconColor || isDarkMode ? '#444444' : '#A3A3A3'
    }]
  })), /*#__PURE__*/React.createElement(View, {
    style: [{
      height
    }, contentContainerStyle]
  }, children))));
}));
//# sourceMappingURL=BottomSheet.js.map