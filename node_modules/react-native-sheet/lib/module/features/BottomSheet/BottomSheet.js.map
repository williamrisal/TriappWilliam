{"version":3,"sources":["BottomSheet.tsx"],"names":["React","memo","useMemo","useState","useRef","useImperativeHandle","useCallback","forwardRef","useEffect","Platform","View","Modal","TouchableOpacity","Animated","PanResponder","useColorScheme","styles","BottomSheet","props","ref","height","colorScheme","onRequestClose","backdropClosesSheet","backdropBackgroundColor","sheetBackgroundColor","sheetStyle","draggable","showDragIcon","dragIconColor","dragIconStyle","borderRadius","contentContainerStyle","onOpenStart","onOpenFinish","onCloseStart","onCloseFinish","openTime","closeTime","children","isDraggable","OS","colorSchemeName","isDarkMode","visible","setVisible","animatedHeight","Value","pan","ValueXY","setModalVisibility","newVisible","timing","toValue","duration","useNativeDriver","start","setValue","x","y","panResponder","create","onStartShouldSetPanResponder","onPanResponderMove","e","gestureState","dy","event","onPanResponderRelease","_e","gestureLimitArea","gestureDistance","spring","current","show","hide","wrapper","backgroundColor","minHeight","backdrop","panHandlers","transform","getTranslateTransform","container","borderTopRightRadius","borderTopLeftRadius","draggableContainer","draggableIcon"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,OAAtB,EAA+BC,QAA/B,EAAyCC,MAAzC,EAAiDC,mBAAjD,EAAsEC,WAAtE,EAAmFC,UAAnF,EAA0GC,SAA1G,QAA2H,OAA3H;AACA,SAASC,QAAT,EAAmBC,IAAnB,EAAyBC,KAAzB,EAAgCC,gBAAhC,EAAkDC,QAAlD,EAA4DC,YAA5D,EAAqFC,cAArF,QAA2G,cAA3G;AACA,SAASC,MAAT,QAAuB,UAAvB;AA8BA,OAAO,MAAMC,WAAW,gBAAGhB,IAAI,eAC7BM,UAAU,CAAmC,CAACW,KAAD,EAAQC,GAAR,KAAgB;AAC3D,QAAM;AACJC,IAAAA,MADI;AAEJC,IAAAA,WAFI;AAGJC,IAAAA,cAHI;AAIJC,IAAAA,mBAAmB,GAAG,IAJlB;AAKJC,IAAAA,uBALI;AAMJC,IAAAA,oBANI;AAOJC,IAAAA,UAPI;AAQJC,IAAAA,SAAS,GAAG,IARR;AASJC,IAAAA,YAAY,GAAG,IATX;AAUJC,IAAAA,aAVI;AAWJC,IAAAA,aAXI;AAYJC,IAAAA,YAAY,GAAG,EAZX;AAaJC,IAAAA,qBAbI;AAcJC,IAAAA,WAdI;AAeJC,IAAAA,YAfI;AAgBJC,IAAAA,YAhBI;AAiBJC,IAAAA,aAjBI;AAkBJC,IAAAA,QAAQ,GAAG,GAlBP;AAmBJC,IAAAA,SAAS,GAAG,GAnBR;AAoBJC,IAAAA;AApBI,MAqBFrB,KArBJ;AAuBA,QAAMsB,WAAW,GAAG/B,QAAQ,CAACgC,EAAT,KAAgB,KAAhB,IAAyB,CAAC,CAACd,SAA/C;AACA,QAAMe,eAAe,GAAG3B,cAAc,MAAM,OAA5C;AACA,QAAM4B,UAAU,GAAGzC,OAAO,CAAC,MAAM;AAC/B;AACA,QAAImB,WAAW,KAAK,MAAhB,IAA0B,CAACA,WAA/B,EAA4C;AAC1C;AACA,aAAOqB,eAAe,KAAK,MAA3B;AACD,KAL8B,CAM/B;;;AACA,WAAOrB,WAAW,KAAK,MAAvB;AACD,GARyB,EAQvB,CAACA,WAAD,EAAcqB,eAAd,CARuB,CAA1B;AASA,QAAM,CAACE,OAAD,EAAUC,UAAV,IAAwB1C,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM2C,cAAc,GAAG5C,OAAO,CAAC,MAAM,IAAIW,QAAQ,CAACkC,KAAb,CAAmB,CAAnB,CAAP,EAA8B,EAA9B,CAA9B;AACA,QAAMC,GAAG,GAAG9C,OAAO,CAAC,MAAM,IAAIW,QAAQ,CAACoC,OAAb,EAAP,EAA+B,EAA/B,CAAnB;AAEA,QAAMC,kBAAkB,GAAG5C,WAAW,CACnC6C,UAAD,IAAyB;AACvB;AACA,QAAIA,UAAJ,EAAgB;AACdN,MAAAA,UAAU,CAAC,IAAD,CAAV;AACA,UAAI,OAAOZ,WAAP,KAAuB,UAA3B,EAAuCA,WAAW;AAClDpB,MAAAA,QAAQ,CAACuC,MAAT,CAAgBN,cAAhB,EAAgC;AAC9BO,QAAAA,OAAO,EAAEjC,MADqB;AAE9BkC,QAAAA,QAAQ,EAAEjB,QAFoB;AAG9BkB,QAAAA,eAAe,EAAE;AAHa,OAAhC,EAIGC,KAJH,CAIS,MAAM;AACb,YAAI,OAAOtB,YAAP,KAAwB,UAA5B,EAAwCA,YAAY;AACrD,OAND;AAOA;AACD,KAbsB,CAevB;;;AACA,QAAI,OAAOC,YAAP,KAAwB,UAA5B,EAAwCA,YAAY;AACpDtB,IAAAA,QAAQ,CAACuC,MAAT,CAAgBN,cAAhB,EAAgC;AAC9BO,MAAAA,OAAO,EAAE,CADqB;AAE9BC,MAAAA,QAAQ,EAAEhB,SAFoB;AAG9BiB,MAAAA,eAAe,EAAE;AAHa,KAAhC,EAIGC,KAJH,CAIS,MAAM;AACbR,MAAAA,GAAG,CAACS,QAAJ,CAAa;AAAEC,QAAAA,CAAC,EAAE,CAAL;AAAQC,QAAAA,CAAC,EAAE;AAAX,OAAb;AACAd,MAAAA,UAAU,CAAC,KAAD,CAAV;AACA,UAAI,OAAOT,aAAP,KAAyB,UAA7B,EAAyCA,aAAa;AACvD,KARD;AASD,GA3BmC,EA4BpC,CAACU,cAAD,EAAiBR,SAAjB,EAA4BlB,MAA5B,EAAoCgB,aAApC,EAAmDD,YAAnD,EAAiED,YAAjE,EAA+ED,WAA/E,EAA4FI,QAA5F,EAAsGW,GAAtG,CA5BoC,CAAtC,CAvC2D,CAsE3D;;AACA,QAAMY,YAAY,GAAGxD,MAAM,CACzBU,YAAY,CAAC+C,MAAb,CAAoB;AAClBC,IAAAA,4BAA4B,EAAE,MAAM,IADlB;AAElBC,IAAAA,kBAAkB,EAAE,CAACC,CAAD,EAAIC,YAAJ,KAAqB;AACvC,UAAIA,YAAY,CAACC,EAAb,GAAkB,CAAtB,EAAyB;AACvBrD,QAAAA,QAAQ,CAACsD,KAAT,CAAe,CAAC,IAAD,EAAO;AAAED,UAAAA,EAAE,EAAElB,GAAG,CAACW;AAAV,SAAP,CAAf,EAAsC;AACpCJ,UAAAA,eAAe,EAAE;AADmB,SAAtC,EAEGS,CAFH,EAEMC,YAFN;AAGD;AACF,KARiB;AASlBG,IAAAA,qBAAqB,EAAE,CAACC,EAAD,EAAKJ,YAAL,KAAsB;AAC3C,YAAMK,gBAAgB,GAAGlD,MAAM,GAAG,CAAlC;AACA,YAAMmD,eAAe,GAAGN,YAAY,CAACC,EAArC;;AACA,UAAIK,eAAe,GAAGD,gBAAtB,EAAwC;AACtCpB,QAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACD,OAFD,MAEO;AACLrC,QAAAA,QAAQ,CAAC2D,MAAT,CAAgBxB,GAAhB,EAAqB;AACnBK,UAAAA,OAAO,EAAE;AAAEK,YAAAA,CAAC,EAAE,CAAL;AAAQC,YAAAA,CAAC,EAAE;AAAX,WADU;AAEnBJ,UAAAA,eAAe,EAAE;AAFE,SAArB,EAGGC,KAHH;AAID;AACF;AApBiB,GAApB,CADyB,CAAN,CAuBnBiB,OAvBF,CAvE2D,CAgG3D;;AACAjE,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIoC,OAAJ,EAAa;AACX/B,MAAAA,QAAQ,CAACuC,MAAT,CAAgBN,cAAhB,EAAgC;AAC9BO,QAAAA,OAAO,EAAEjC,MADqB;AAE9BkC,QAAAA,QAAQ,EAAE,CAFoB;AAG9BC,QAAAA,eAAe,EAAE;AAHa,OAAhC,EAIGC,KAJH;AAKD,KAPa,CAQd;;AACD,GATQ,EASN,CAACpC,MAAD,CATM,CAAT,CAjG2D,CA0G7C;AAEd;;AACAf,EAAAA,mBAAmB,CAACc,GAAD,EAAM,OAAO;AAC9BuD,IAAAA,IAAI,EAAE,MAAMxB,kBAAkB,CAAC,IAAD,CADA;AAE9ByB,IAAAA,IAAI,EAAE,MAAMzB,kBAAkB,CAAC,KAAD;AAFA,GAAP,CAAN,CAAnB,CA7G2D,CAkH3D;;AACA,MAAI,CAACN,OAAL,EAAc,OAAO,IAAP;AAEd,sBACE,oBAAC,KAAD;AAAO,IAAA,WAAW,MAAlB;AAAmB,IAAA,OAAO,EAAEA,OAA5B;AAAqC,IAAA,cAAc,EAAEtB,cAAc,GAAGA,cAAH,GAAoB,MAAM4B,kBAAkB,CAAC,KAAD;AAA/G,kBACE,oBAAC,IAAD;AACE,IAAA,KAAK,EAAE,CACLlC,MAAM,CAAC4D,OADF,EAEL;AACEC,MAAAA,eAAe,EAAErD,uBAAuB,IAAK,WAD/C;AAEEsD,MAAAA,SAAS,EAAE1D;AAFb,KAFK;AADT,kBASE,oBAAC,gBAAD;AAAkB,IAAA,MAAM,EAAC,UAAzB;AAAoC,IAAA,QAAQ,EAAE,CAACG,mBAA/C;AAAoE,IAAA,KAAK,EAAEP,MAAM,CAAC+D,QAAlF;AAA4F,IAAA,aAAa,EAAE,CAA3G;AAA8G,IAAA,OAAO,EAAE,MAAM7B,kBAAkB,CAAC,KAAD;AAA/I,IATF,eAUE,oBAAC,QAAD,CAAU,IAAV,eACOV,WAAW,IAAIoB,YAAY,CAACoB,WADnC;AAEE,IAAA,KAAK,EAAE,CACL;AACEC,MAAAA,SAAS,EAAEjC,GAAG,CAACkC,qBAAJ;AADb,KADK,EAILlE,MAAM,CAACmE,SAJF,EAKL;AACE/D,MAAAA,MAAM,EAAE0B,cADV;AAEEsC,MAAAA,oBAAoB,EAAErD,YAFxB;AAGEsD,MAAAA,mBAAmB,EAAEtD,YAHvB;AAIE8C,MAAAA,eAAe,EAAEpD,oBAAoB,IAAIkB,UAAxB,GAAqC,SAArC,GAAiD;AAJpE,KALK,EAWLjB,UAXK,CAFT;AAeE,IAAA,MAAM,EAAC;AAfT,MAiBGc,WAAW,IAAIZ,YAAf,iBACC,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEZ,MAAM,CAACsE;AAApB,kBACE,oBAAC,IAAD;AACE,IAAA,MAAM,EAAC,WADT;AAEE,IAAA,KAAK,EAAE,CACLtE,MAAM,CAACuE,aADF,EAELzD,aAFK,EAGL;AACE+C,MAAAA,eAAe,EAAEhD,aAAa,IAAIc,UAAjB,GAA8B,SAA9B,GAA0C;AAD7D,KAHK;AAFT,IADF,CAlBJ,eA+BE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE,CAAC;AAAEvB,MAAAA;AAAF,KAAD,EAAaY,qBAAb;AAAb,KAAmDO,QAAnD,CA/BF,CAVF,CADF,CADF;AAgDD,CArKS,CADmB,CAAxB","sourcesContent":["import React, { memo, useMemo, useState, useRef, useImperativeHandle, useCallback, forwardRef, ReactNode, useEffect } from 'react';\nimport { Platform, View, Modal, TouchableOpacity, Animated, PanResponder, ViewStyle, useColorScheme } from 'react-native';\nimport { styles } from './styles';\n\nexport interface BottomSheetRef {\n  show: () => void;\n  hide: () => void;\n}\n\nexport interface BottomSheetProps {\n  children: ReactNode;\n  height: number;\n  colorScheme?: 'auto' | 'light' | 'dark' | undefined;\n  onRequestClose?: (() => void) | undefined;\n  backdropClosesSheet?: boolean | undefined;\n  backdropBackgroundColor?: string | undefined;\n  sheetBackgroundColor?: string | undefined;\n  sheetStyle?: ViewStyle | undefined;\n  draggable?: boolean | undefined;\n  showDragIcon?: boolean | undefined;\n  dragIconColor?: string | undefined;\n  dragIconStyle?: ViewStyle | undefined;\n  contentContainerStyle?: ViewStyle | undefined;\n  borderRadius?: number | undefined;\n  openTime?: number | undefined;\n  closeTime?: number | undefined;\n  onOpenStart?: () => void;\n  onOpenFinish?: () => void;\n  onCloseStart?: () => void;\n  onCloseFinish?: () => void;\n}\n\nexport const BottomSheet = memo(\n  forwardRef<BottomSheetRef, BottomSheetProps>((props, ref) => {\n    const {\n      height,\n      colorScheme,\n      onRequestClose,\n      backdropClosesSheet = true,\n      backdropBackgroundColor,\n      sheetBackgroundColor,\n      sheetStyle,\n      draggable = true,\n      showDragIcon = true,\n      dragIconColor,\n      dragIconStyle,\n      borderRadius = 10,\n      contentContainerStyle,\n      onOpenStart,\n      onOpenFinish,\n      onCloseStart,\n      onCloseFinish,\n      openTime = 300,\n      closeTime = 300,\n      children\n    } = props;\n\n    const isDraggable = Platform.OS !== 'web' && !!draggable;\n    const colorSchemeName = useColorScheme() || 'light';\n    const isDarkMode = useMemo(() => {\n      // Color Scheme from props passed as 'auto' or undefined\n      if (colorScheme === 'auto' || !colorScheme) {\n        // Then use OS hook result\n        return colorSchemeName === 'dark';\n      }\n      // Otherwise return user choice\n      return colorScheme === 'dark';\n    }, [colorScheme, colorSchemeName]);\n    const [visible, setVisible] = useState(false);\n    const animatedHeight = useMemo(() => new Animated.Value(0), []);\n    const pan = useMemo(() => new Animated.ValueXY(), []);\n\n    const setModalVisibility = useCallback(\n      (newVisible: boolean) => {\n        // Open modal\n        if (newVisible) {\n          setVisible(true);\n          if (typeof onOpenStart === 'function') onOpenStart();\n          Animated.timing(animatedHeight, {\n            toValue: height,\n            duration: openTime,\n            useNativeDriver: false\n          }).start(() => {\n            if (typeof onOpenFinish === 'function') onOpenFinish();\n          });\n          return;\n        }\n\n        // Close modal\n        if (typeof onCloseStart === 'function') onCloseStart();\n        Animated.timing(animatedHeight, {\n          toValue: 0,\n          duration: closeTime,\n          useNativeDriver: false\n        }).start(() => {\n          pan.setValue({ x: 0, y: 0 });\n          setVisible(false);\n          if (typeof onCloseFinish === 'function') onCloseFinish();\n        });\n      },\n      [animatedHeight, closeTime, height, onCloseFinish, onCloseStart, onOpenFinish, onOpenStart, openTime, pan]\n    );\n\n    // Respond to pan changes\n    const panResponder = useRef(\n      PanResponder.create({\n        onStartShouldSetPanResponder: () => true,\n        onPanResponderMove: (e, gestureState) => {\n          if (gestureState.dy > 0) {\n            Animated.event([null, { dy: pan.y }], {\n              useNativeDriver: false\n            })(e, gestureState);\n          }\n        },\n        onPanResponderRelease: (_e, gestureState) => {\n          const gestureLimitArea = height / 3;\n          const gestureDistance = gestureState.dy;\n          if (gestureDistance > gestureLimitArea) {\n            setModalVisibility(false);\n          } else {\n            Animated.spring(pan, {\n              toValue: { x: 0, y: 0 },\n              useNativeDriver: false\n            }).start();\n          }\n        }\n      })\n    ).current;\n\n    // If `height` prop changes while open, respond and change to new height immediately\n    useEffect(() => {\n      if (visible) {\n        Animated.timing(animatedHeight, {\n          toValue: height,\n          duration: 0,\n          useNativeDriver: false\n        }).start();\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [height]); // we only want the useEffect to run when height prop changes\n\n    // Expose specific methods on hook\n    useImperativeHandle(ref, () => ({\n      show: () => setModalVisibility(true),\n      hide: () => setModalVisibility(false)\n    }));\n\n    // Return nothing if not visible\n    if (!visible) return null;\n\n    return (\n      <Modal transparent visible={visible} onRequestClose={onRequestClose ? onRequestClose : () => setModalVisibility(false)}>\n        <View\n          style={[\n            styles.wrapper,\n            {\n              backgroundColor: backdropBackgroundColor || `#25252599`,\n              minHeight: height\n            }\n          ]}\n        >\n          <TouchableOpacity testID='backdrop' disabled={!backdropClosesSheet} style={styles.backdrop} activeOpacity={1} onPress={() => setModalVisibility(false)} />\n          <Animated.View\n            {...(isDraggable && panResponder.panHandlers)}\n            style={[\n              {\n                transform: pan.getTranslateTransform()\n              },\n              styles.container,\n              {\n                height: animatedHeight,\n                borderTopRightRadius: borderRadius,\n                borderTopLeftRadius: borderRadius,\n                backgroundColor: sheetBackgroundColor || isDarkMode ? '#222222' : '#F3F3F3'\n              },\n              sheetStyle\n            ]}\n            testID='animated-view'\n          >\n            {isDraggable && showDragIcon && (\n              <View style={styles.draggableContainer}>\n                <View\n                  testID='drag-icon'\n                  style={[\n                    styles.draggableIcon,\n                    dragIconStyle,\n                    {\n                      backgroundColor: dragIconColor || isDarkMode ? '#444444' : '#A3A3A3'\n                    }\n                  ]}\n                />\n              </View>\n            )}\n            <View style={[{ height }, contentContainerStyle]}>{children}</View>\n          </Animated.View>\n        </View>\n      </Modal>\n    );\n  })\n);\n"]}